node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/guitar.tfrecords"
      }
    }
  }
}
node {
  name: "flat_filenames/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flat_filenames"
  op: "Reshape"
  input: "Const"
  input: "flat_filenames/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_SmWORJYaibI"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 65536
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 65536
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 65536
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7745966911315918
      }
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7745966911315918
      }
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "guitar_model/H/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform/sub"
  op: "Sub"
  input: "guitar_model/H/Initializer/random_uniform/max"
  input: "guitar_model/H/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform/mul"
  op: "Mul"
  input: "guitar_model/H/Initializer/random_uniform/RandomUniform"
  input: "guitar_model/H/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/H/Initializer/random_uniform"
  op: "Add"
  input: "guitar_model/H/Initializer/random_uniform/mul"
  input: "guitar_model/H/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/H"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "guitar_model/H/Assign"
  op: "Assign"
  input: "guitar_model/H"
  input: "guitar_model/H/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "guitar_model/H/read"
  op: "Identity"
  input: "guitar_model/H"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/symmetrize/MatrixBandPart/num_lower"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "guitar_model/symmetrize/MatrixBandPart/num_upper"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/symmetrize/MatrixBandPart"
  op: "MatrixBandPart"
  input: "guitar_model/H/read"
  input: "guitar_model/symmetrize/MatrixBandPart/num_lower"
  input: "guitar_model/symmetrize/MatrixBandPart/num_upper"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindex"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/symmetrize/matrix_transpose/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/symmetrize/matrix_transpose/transpose"
  op: "Transpose"
  input: "guitar_model/symmetrize/MatrixBandPart"
  input: "guitar_model/symmetrize/matrix_transpose/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/symmetrize/add"
  op: "Add"
  input: "guitar_model/symmetrize/MatrixBandPart"
  input: "guitar_model/symmetrize/matrix_transpose/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7745966911315918
      }
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7745966911315918
      }
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "guitar_model/R/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform/sub"
  op: "Sub"
  input: "guitar_model/R/Initializer/random_uniform/max"
  input: "guitar_model/R/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform/mul"
  op: "Mul"
  input: "guitar_model/R/Initializer/random_uniform/RandomUniform"
  input: "guitar_model/R/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/R/Initializer/random_uniform"
  op: "Add"
  input: "guitar_model/R/Initializer/random_uniform/mul"
  input: "guitar_model/R/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/R"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "guitar_model/R/Assign"
  op: "Assign"
  input: "guitar_model/R"
  input: "guitar_model/R/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "guitar_model/R/read"
  op: "Identity"
  input: "guitar_model/R"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice"
  op: "StridedSlice"
  input: "IteratorGetNext"
  input: "guitar_model/strided_slice/stack"
  input: "guitar_model/strided_slice/stack_1"
  input: "guitar_model/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 65535
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_1"
  op: "StridedSlice"
  input: "IteratorGetNext"
  input: "guitar_model/strided_slice_1/stack"
  input: "guitar_model/strided_slice_1/stack_1"
  input: "guitar_model/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 65535
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/sub"
  op: "Sub"
  input: "guitar_model/strided_slice"
  input: "guitar_model/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 65535
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/strided_slice_2"
  op: "StridedSlice"
  input: "guitar_model/sub"
  input: "guitar_model/strided_slice_2/stack"
  input: "guitar_model/strided_slice_2/stack_1"
  input: "guitar_model/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "guitar_model/zeros_like"
  op: "ZerosLike"
  input: "guitar_model/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/Cast"
  op: "Cast"
  input: "guitar_model/zeros_like"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 1.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "guitar_model/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "guitar_model/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/one_hot"
  op: "OneHot"
  input: "guitar_model/Cast"
  input: "guitar_model/one_hot/depth"
  input: "guitar_model/one_hot/on_value"
  input: "guitar_model/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "guitar_model/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/transpose"
  op: "Transpose"
  input: "guitar_model/sub"
  input: "guitar_model/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65535
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 65535
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArray"
  op: "TensorArrayV3"
  input: "guitar_model/loss_fold/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "guitar_model/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/TensorArrayUnstack/Shape"
  input: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice/stack"
  input: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice/stack_1"
  input: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/range"
  op: "Range"
  input: "guitar_model/loss_fold/TensorArrayUnstack/range/start"
  input: "guitar_model/loss_fold/TensorArrayUnstack/strided_slice"
  input: "guitar_model/loss_fold/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "guitar_model/loss_fold/TensorArray"
  input: "guitar_model/loss_fold/TensorArrayUnstack/range"
  input: "guitar_model/transpose"
  input: "guitar_model/loss_fold/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Enter"
  op: "Enter"
  input: "guitar_model/loss_fold/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Enter_1"
  op: "Enter"
  input: "guitar_model/one_hot"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Enter_2"
  op: "Enter"
  input: "guitar_model/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Merge"
  op: "Merge"
  input: "guitar_model/loss_fold/while/Enter"
  input: "guitar_model/loss_fold/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Merge_1"
  op: "Merge"
  input: "guitar_model/loss_fold/while/Enter_1"
  input: "guitar_model/loss_fold/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Merge_2"
  op: "Merge"
  input: "guitar_model/loss_fold/while/Enter_2"
  input: "guitar_model/loss_fold/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Less/y"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 65535
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Less"
  op: "Less"
  input: "guitar_model/loss_fold/while/Merge"
  input: "guitar_model/loss_fold/while/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/LoopCond"
  op: "LoopCond"
  input: "guitar_model/loss_fold/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Switch"
  op: "Switch"
  input: "guitar_model/loss_fold/while/Merge"
  input: "guitar_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/loss_fold/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Switch_1"
  op: "Switch"
  input: "guitar_model/loss_fold/while/Merge_1"
  input: "guitar_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/loss_fold/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Switch_2"
  op: "Switch"
  input: "guitar_model/loss_fold/while/Merge_2"
  input: "guitar_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/loss_fold/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Identity"
  op: "Identity"
  input: "guitar_model/loss_fold/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Identity_1"
  op: "Identity"
  input: "guitar_model/loss_fold/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Identity_2"
  op: "Identity"
  input: "guitar_model/loss_fold/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "guitar_model/loss_fold/while/TensorArrayReadV3/Enter"
  input: "guitar_model/loss_fold/while/Identity"
  input: "guitar_model/loss_fold/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "guitar_model/loss_fold/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "guitar_model/loss_fold/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/Cast"
  op: "Cast"
  input: "guitar_model/loss_fold/while/expectation/Cast/Enter"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/Cast/Enter"
  op: "Enter"
  input: "guitar_model/R/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/Conj"
  op: "Conj"
  input: "guitar_model/loss_fold/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/expectation/Conj"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_1/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_1"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/expectation/Cast"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Shape"
  op: "Shape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice/stack"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice/stack_1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice/stack_2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/while/expectation/einsum/Shape"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice/stack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice/stack_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/mul/x"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/mul"
  op: "Mul"
  input: "guitar_model/loss_fold/while/expectation/einsum/mul/x"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/expectation/einsum/mul"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/MatMul"
  op: "MatMul"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_1/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_1/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_1/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_1"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/expectation/einsum/MatMul"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_2/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_2"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_3/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_3"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/Identity_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Shape_1"
  op: "Shape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1/stack"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1/stack_1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1/stack_2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/while/expectation/einsum/Shape_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1/stack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1/stack_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2/shape/2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2/shape/1"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_2"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Shape_2"
  op: "Shape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_3"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2/stack"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2/stack_1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2/stack_2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/while/expectation/einsum/Shape_2"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2/stack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2/stack_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3/shape/2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_2"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3/shape/1"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_3"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/MatMul_1"
  op: "BatchMatMul"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_2"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_4/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/expectation/einsum/strided_slice_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/Reshape_4"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/expectation/einsum/MatMul_1"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_4/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/einsum/transpose_4"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/expectation/einsum/Reshape_4"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/Real"
  op: "Real"
  input: "guitar_model/loss_fold/while/expectation/einsum/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/mul/x"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/expectation/mul"
  op: "Mul"
  input: "guitar_model/loss_fold/while/expectation/mul/x"
  input: "guitar_model/loss_fold/while/expectation/Real"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/sub"
  op: "Sub"
  input: "guitar_model/loss_fold/while/TensorArrayReadV3"
  input: "guitar_model/loss_fold/while/expectation/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/pow/y"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/pow"
  op: "Pow"
  input: "guitar_model/loss_fold/while/sub"
  input: "guitar_model/loss_fold/while/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/truediv/y"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/truediv"
  op: "RealDiv"
  input: "guitar_model/loss_fold/while/pow"
  input: "guitar_model/loss_fold/while/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/add"
  op: "Add"
  input: "guitar_model/loss_fold/while/Identity_2"
  input: "guitar_model/loss_fold/while/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/Cast"
  op: "Cast"
  input: "guitar_model/loss_fold/while/TensorArrayReadV3"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/Cast_1"
  op: "Cast"
  input: "guitar_model/loss_fold/while/update_ancilla/Cast_1/Enter"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/Cast_1/Enter"
  op: "Enter"
  input: "guitar_model/symmetrize/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "guitar_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/Cast_2"
  op: "Cast"
  input: "guitar_model/loss_fold/while/expectation/Cast/Enter"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/mul/x"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: -0.0
        scomplex_val: -1.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/mul"
  op: "Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/mul/x"
  input: "guitar_model/loss_fold/while/update_ancilla/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/MatMul"
  op: "MatMul"
  input: "guitar_model/loss_fold/while/update_ancilla/Cast_2"
  input: "guitar_model/loss_fold/while/update_ancilla/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/truediv/y"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 2.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/truediv"
  op: "RealDiv"
  input: "guitar_model/loss_fold/while/update_ancilla/MatMul"
  input: "guitar_model/loss_fold/while/update_ancilla/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/sub"
  op: "Sub"
  input: "guitar_model/loss_fold/while/update_ancilla/mul"
  input: "guitar_model/loss_fold/while/update_ancilla/truediv"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/mul_1/x"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/mul_1"
  op: "Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/mul_1/x"
  input: "guitar_model/loss_fold/while/update_ancilla/sub"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/mul_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_1/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_1"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/Identity_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Shape"
  op: "Shape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice/stack"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice/stack_1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice/stack_2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Shape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice/stack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice/stack_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/mul/x"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/mul"
  op: "Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/mul/x"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape/shape/0"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape/shape/0"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/MatMul"
  op: "MatMul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape_1/shape/0"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape_1/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape_1/shape/0"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape_1"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/MatMul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_2/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_2"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/Reshape_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/add"
  op: "Add"
  input: "guitar_model/loss_fold/while/Identity_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/Cast"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_1/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_1"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/Cast_2"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims/dim"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims"
  op: "ExpandDims"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
  op: "ExpandDims"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
  op: "ExpandDims"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Mul"
  op: "Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_2/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_3/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_3"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/Identity_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Shape"
  op: "Shape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice/stack"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice/stack_1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice/stack_2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Shape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice/stack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice/stack_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape/2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape/1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Shape_1"
  op: "Shape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_3"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1/stack"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1"
  op: "StridedSlice"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Shape_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1/stack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1/stack_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape/2"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice_1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape/1"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_3"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/MatMul"
  op: "BatchMatMul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_2/shape/1"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_2/shape"
  op: "Pack"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/strided_slice"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_2/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_2"
  op: "Reshape"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/MatMul"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_4/perm"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
  op: "Transpose"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/Reshape_2"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/mul_2/x"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/mul_2"
  op: "Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/mul_2/x"
  input: "guitar_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/add_1"
  op: "Add"
  input: "guitar_model/loss_fold/while/update_ancilla/add"
  input: "guitar_model/loss_fold/while/update_ancilla/mul_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Abs"
  op: "ComplexAbs"
  input: "guitar_model/loss_fold/while/update_ancilla/add_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Square"
  op: "Square"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Sum/reduction_indices"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Sum"
  op: "Sum"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Square"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Maximum/y"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Maximum"
  op: "Maximum"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Sum"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
  op: "Rsqrt"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Cast"
  op: "Cast"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/update_ancilla/normalize/Mul"
  op: "Mul"
  input: "guitar_model/loss_fold/while/update_ancilla/add_1"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Cast"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/add_1/y"
  op: "Const"
  input: "^guitar_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/add_1"
  op: "Add"
  input: "guitar_model/loss_fold/while/Identity"
  input: "guitar_model/loss_fold/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/NextIteration"
  op: "NextIteration"
  input: "guitar_model/loss_fold/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/NextIteration_1"
  op: "NextIteration"
  input: "guitar_model/loss_fold/while/update_ancilla/normalize/Mul"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/NextIteration_2"
  op: "NextIteration"
  input: "guitar_model/loss_fold/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Exit"
  op: "Exit"
  input: "guitar_model/loss_fold/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Exit_1"
  op: "Exit"
  input: "guitar_model/loss_fold/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/loss_fold/while/Exit_2"
  op: "Exit"
  input: "guitar_model/loss_fold/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "guitar_model/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "guitar_model/Mean"
  op: "Mean"
  input: "guitar_model/loss_fold/while/Exit_2"
  input: "guitar_model/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^guitar_model/H/Assign"
  input: "^guitar_model/R/Assign"
}
node {
  name: "sine_model_data/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model_data/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 4096.0
      }
    }
  }
}
node {
  name: "sine_model_data/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sine_model_data/range"
  op: "Range"
  input: "sine_model_data/range/start"
  input: "sine_model_data/range/limit"
  input: "sine_model_data/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/stack"
  op: "Pack"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  input: "sine_model_data/range"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sine_model_data/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "sine_model_data/truediv"
  op: "RealDiv"
  input: "sine_model_data/stack"
  input: "sine_model_data/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/random_uniform/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model_data/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model_data/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.2831854820251465
      }
    }
  }
}
node {
  name: "sine_model_data/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "sine_model_data/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "sine_model_data/random_uniform/sub"
  op: "Sub"
  input: "sine_model_data/random_uniform/max"
  input: "sine_model_data/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model_data/random_uniform/mul"
  op: "Mul"
  input: "sine_model_data/random_uniform/RandomUniform"
  input: "sine_model_data/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/random_uniform"
  op: "Add"
  input: "sine_model_data/random_uniform/mul"
  input: "sine_model_data/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model_data/mul"
  op: "Mul"
  input: "sine_model_data/mul/x"
  input: "sine_model_data/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/add"
  op: "Add"
  input: "sine_model_data/truediv"
  input: "sine_model_data/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/Sin"
  op: "Sin"
  input: "sine_model_data/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model_data/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 4096.0
      }
    }
  }
}
node {
  name: "sine_model_data/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sine_model_data/range_1"
  op: "Range"
  input: "sine_model_data/range_1/start"
  input: "sine_model_data/range_1/limit"
  input: "sine_model_data/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0010000000474974513
      }
    }
  }
}
node {
  name: "sine_model_data/mul_1"
  op: "Mul"
  input: "sine_model_data/mul_1/x"
  input: "sine_model_data/range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/Exp"
  op: "Exp"
  input: "sine_model_data/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_data/mul_2"
  op: "Mul"
  input: "sine_model_data/Sin"
  input: "sine_model_data/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4096
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7745966911315918
      }
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7745966911315918
      }
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "sine_model/H/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform/sub"
  op: "Sub"
  input: "sine_model/H/Initializer/random_uniform/max"
  input: "sine_model/H/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform/mul"
  op: "Mul"
  input: "sine_model/H/Initializer/random_uniform/RandomUniform"
  input: "sine_model/H/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/H/Initializer/random_uniform"
  op: "Add"
  input: "sine_model/H/Initializer/random_uniform/mul"
  input: "sine_model/H/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/H"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/H/Assign"
  op: "Assign"
  input: "sine_model/H"
  input: "sine_model/H/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/H/read"
  op: "Identity"
  input: "sine_model/H"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/symmetrize/MatrixBandPart/num_lower"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sine_model/symmetrize/MatrixBandPart/num_upper"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sine_model/symmetrize/MatrixBandPart"
  op: "MatrixBandPart"
  input: "sine_model/H/read"
  input: "sine_model/symmetrize/MatrixBandPart/num_lower"
  input: "sine_model/symmetrize/MatrixBandPart/num_upper"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindex"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/symmetrize/matrix_transpose/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/symmetrize/matrix_transpose/transpose"
  op: "Transpose"
  input: "sine_model/symmetrize/MatrixBandPart"
  input: "sine_model/symmetrize/matrix_transpose/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/symmetrize/add"
  op: "Add"
  input: "sine_model/symmetrize/MatrixBandPart"
  input: "sine_model/symmetrize/matrix_transpose/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7745966911315918
      }
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7745966911315918
      }
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "sine_model/R/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform/sub"
  op: "Sub"
  input: "sine_model/R/Initializer/random_uniform/max"
  input: "sine_model/R/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform/mul"
  op: "Mul"
  input: "sine_model/R/Initializer/random_uniform/RandomUniform"
  input: "sine_model/R/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/R/Initializer/random_uniform"
  op: "Add"
  input: "sine_model/R/Initializer/random_uniform/mul"
  input: "sine_model/R/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/R"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/R/Assign"
  op: "Assign"
  input: "sine_model/R"
  input: "sine_model/R/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/R/read"
  op: "Identity"
  input: "sine_model/R"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice"
  op: "StridedSlice"
  input: "sine_model_data/mul_2"
  input: "sine_model/strided_slice/stack"
  input: "sine_model/strided_slice/stack_1"
  input: "sine_model/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4095
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sine_model/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_1"
  op: "StridedSlice"
  input: "sine_model_data/mul_2"
  input: "sine_model/strided_slice_1/stack"
  input: "sine_model/strided_slice_1/stack_1"
  input: "sine_model/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4095
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sine_model/sub"
  op: "Sub"
  input: "sine_model/strided_slice"
  input: "sine_model/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4095
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/strided_slice_2"
  op: "StridedSlice"
  input: "sine_model/sub"
  input: "sine_model/strided_slice_2/stack"
  input: "sine_model/strided_slice_2/stack_1"
  input: "sine_model/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sine_model/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/Cast"
  op: "Cast"
  input: "sine_model/zeros_like"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 1.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "sine_model/one_hot"
  op: "OneHot"
  input: "sine_model/Cast"
  input: "sine_model/one_hot/depth"
  input: "sine_model/one_hot/on_value"
  input: "sine_model/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "sine_model/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/transpose"
  op: "Transpose"
  input: "sine_model/sub"
  input: "sine_model/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4095
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4095
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArray"
  op: "TensorArrayV3"
  input: "sine_model/loss_fold/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\017\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "sine_model/loss_fold/TensorArrayUnstack/Shape"
  input: "sine_model/loss_fold/TensorArrayUnstack/strided_slice/stack"
  input: "sine_model/loss_fold/TensorArrayUnstack/strided_slice/stack_1"
  input: "sine_model/loss_fold/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/range"
  op: "Range"
  input: "sine_model/loss_fold/TensorArrayUnstack/range/start"
  input: "sine_model/loss_fold/TensorArrayUnstack/strided_slice"
  input: "sine_model/loss_fold/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4095
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "sine_model/loss_fold/TensorArray"
  input: "sine_model/loss_fold/TensorArrayUnstack/range"
  input: "sine_model/transpose"
  input: "sine_model/loss_fold/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Enter"
  op: "Enter"
  input: "sine_model/loss_fold/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Enter_1"
  op: "Enter"
  input: "sine_model/one_hot"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Enter_2"
  op: "Enter"
  input: "sine_model/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Merge"
  op: "Merge"
  input: "sine_model/loss_fold/while/Enter"
  input: "sine_model/loss_fold/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Merge_1"
  op: "Merge"
  input: "sine_model/loss_fold/while/Enter_1"
  input: "sine_model/loss_fold/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Merge_2"
  op: "Merge"
  input: "sine_model/loss_fold/while/Enter_2"
  input: "sine_model/loss_fold/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Less/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4095
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Less"
  op: "Less"
  input: "sine_model/loss_fold/while/Merge"
  input: "sine_model/loss_fold/while/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/LoopCond"
  op: "LoopCond"
  input: "sine_model/loss_fold/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Switch"
  op: "Switch"
  input: "sine_model/loss_fold/while/Merge"
  input: "sine_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Switch_1"
  op: "Switch"
  input: "sine_model/loss_fold/while/Merge_1"
  input: "sine_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Switch_2"
  op: "Switch"
  input: "sine_model/loss_fold/while/Merge_2"
  input: "sine_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Identity"
  op: "Identity"
  input: "sine_model/loss_fold/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Identity_1"
  op: "Identity"
  input: "sine_model/loss_fold/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Identity_2"
  op: "Identity"
  input: "sine_model/loss_fold/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "sine_model/loss_fold/while/TensorArrayReadV3/Enter"
  input: "sine_model/loss_fold/while/Identity"
  input: "sine_model/loss_fold/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sine_model/loss_fold/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "sine_model/loss_fold/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "sine_model/loss_fold/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/Cast"
  op: "Cast"
  input: "sine_model/loss_fold/while/expectation/Cast/Enter"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/Cast/Enter"
  op: "Enter"
  input: "sine_model/R/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/Conj"
  op: "Conj"
  input: "sine_model/loss_fold/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose"
  op: "Transpose"
  input: "sine_model/loss_fold/while/expectation/Conj"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_1/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_1"
  op: "Transpose"
  input: "sine_model/loss_fold/while/expectation/Cast"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/MatMul"
  op: "MatMul"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_2/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_2"
  op: "Transpose"
  input: "sine_model/loss_fold/while/expectation/einsum/MatMul"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_3/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_3"
  op: "Transpose"
  input: "sine_model/loss_fold/while/Identity_1"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/Reshape/shape"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/Reshape"
  op: "Reshape"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_2"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/Reshape_1/shape"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/Reshape_1"
  op: "Reshape"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_3"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/MatMul_1"
  op: "BatchMatMul"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/Reshape_2/shape"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/Reshape_2"
  op: "Reshape"
  input: "sine_model/loss_fold/while/expectation/einsum/MatMul_1"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_4/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/einsum/transpose_4"
  op: "Transpose"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape_2"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/Real"
  op: "Real"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/mul/x"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/expectation/mul"
  op: "Mul"
  input: "sine_model/loss_fold/while/expectation/mul/x"
  input: "sine_model/loss_fold/while/expectation/Real"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/sub"
  op: "Sub"
  input: "sine_model/loss_fold/while/TensorArrayReadV3"
  input: "sine_model/loss_fold/while/expectation/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/pow/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/pow"
  op: "Pow"
  input: "sine_model/loss_fold/while/sub"
  input: "sine_model/loss_fold/while/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/truediv/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/truediv"
  op: "RealDiv"
  input: "sine_model/loss_fold/while/pow"
  input: "sine_model/loss_fold/while/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/add"
  op: "Add"
  input: "sine_model/loss_fold/while/Identity_2"
  input: "sine_model/loss_fold/while/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/Cast"
  op: "Cast"
  input: "sine_model/loss_fold/while/TensorArrayReadV3"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/Cast_1"
  op: "Cast"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_1/Enter"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/Cast_1/Enter"
  op: "Enter"
  input: "sine_model/symmetrize/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/Cast_2"
  op: "Cast"
  input: "sine_model/loss_fold/while/expectation/Cast/Enter"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/mul/x"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: -0.0
        scomplex_val: -1.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/mul"
  op: "Mul"
  input: "sine_model/loss_fold/while/update_ancilla/mul/x"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/MatMul"
  op: "MatMul"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_2"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/truediv/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 2.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/truediv"
  op: "RealDiv"
  input: "sine_model/loss_fold/while/update_ancilla/MatMul"
  input: "sine_model/loss_fold/while/update_ancilla/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/sub"
  op: "Sub"
  input: "sine_model/loss_fold/while/update_ancilla/mul"
  input: "sine_model/loss_fold/while/update_ancilla/truediv"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/mul_1/x"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/mul_1"
  op: "Mul"
  input: "sine_model/loss_fold/while/update_ancilla/mul_1/x"
  input: "sine_model/loss_fold/while/update_ancilla/sub"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/transpose/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/transpose"
  op: "Transpose"
  input: "sine_model/loss_fold/while/update_ancilla/mul_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_1/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_1"
  op: "Transpose"
  input: "sine_model/loss_fold/while/Identity_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/MatMul"
  op: "MatMul"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_2/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_2"
  op: "Transpose"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/MatMul"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/add"
  op: "Add"
  input: "sine_model/loss_fold/while/Identity_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose"
  op: "Transpose"
  input: "sine_model/loss_fold/while/update_ancilla/Cast"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1"
  op: "Transpose"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_2"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims/dim"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims"
  op: "ExpandDims"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
  op: "ExpandDims"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
  op: "ExpandDims"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/Mul"
  op: "Mul"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
  op: "Transpose"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/Mul"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3"
  op: "Transpose"
  input: "sine_model/loss_fold/while/Identity_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
  op: "Reshape"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul"
  op: "BatchMatMul"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1"
  op: "Reshape"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4/perm"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
  op: "Transpose"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/mul_2/x"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/mul_2"
  op: "Mul"
  input: "sine_model/loss_fold/while/update_ancilla/mul_2/x"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/add_1"
  op: "Add"
  input: "sine_model/loss_fold/while/update_ancilla/add"
  input: "sine_model/loss_fold/while/update_ancilla/mul_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Abs"
  op: "ComplexAbs"
  input: "sine_model/loss_fold/while/update_ancilla/add_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Square"
  op: "Square"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Sum/reduction_indices"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Sum"
  op: "Sum"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Square"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Maximum/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Maximum"
  op: "Maximum"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Sum"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
  op: "Rsqrt"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Cast"
  op: "Cast"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/update_ancilla/normalize/Mul"
  op: "Mul"
  input: "sine_model/loss_fold/while/update_ancilla/add_1"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Cast"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/add_1/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/add_1"
  op: "Add"
  input: "sine_model/loss_fold/while/Identity"
  input: "sine_model/loss_fold/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/NextIteration"
  op: "NextIteration"
  input: "sine_model/loss_fold/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/NextIteration_1"
  op: "NextIteration"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Mul"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/NextIteration_2"
  op: "NextIteration"
  input: "sine_model/loss_fold/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Exit"
  op: "Exit"
  input: "sine_model/loss_fold/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Exit_1"
  op: "Exit"
  input: "sine_model/loss_fold/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/loss_fold/while/Exit_2"
  op: "Exit"
  input: "sine_model/loss_fold/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sine_model/Mean"
  op: "Mean"
  input: "sine_model/loss_fold/while/Exit_2"
  input: "sine_model/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "sine_model/Mean"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss_function/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss_function"
      }
    }
  }
}
node {
  name: "loss_function"
  op: "ScalarSummary"
  input: "loss_function/tags"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_inputs/sample_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16000.0
      }
    }
  }
}
node {
  name: "sample_inputs/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "sample_inputs"
      }
    }
  }
}
node {
  name: "sample_inputs"
  op: "AudioSummaryV2"
  input: "sample_inputs/tag"
  input: "sine_model_data/mul_2"
  input: "sample_inputs/sample_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "max_outputs"
    value {
      i: 1
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "sine_model/loss_fold/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^sine_model/loss_fold/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPushV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sine_model/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/sine_model/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "gradients/sine_model/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/sine_model/Mean_grad/Reshape"
  input: "gradients/sine_model/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 8.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/sine_model/Mean_grad/Tile"
  input: "gradients/sine_model/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
        scomplex_val: 0.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/sine_model/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/sine_model/loss_fold/while/Exit_2_grad/b_exit"
  input: "gradients/sine_model/loss_fold/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/sine_model/loss_fold/while/Exit_1_grad/b_exit"
  input: "gradients/sine_model/loss_fold/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/Merge_2_grad/Switch"
  input: "^gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/Merge_2_grad/Switch:1"
  input: "^gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/sine_model/loss_fold/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/Merge_1_grad/Switch"
  input: "^gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/Merge_1_grad/Switch:1"
  input: "^gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/sine_model/loss_fold/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/sine_model/loss_fold/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/add_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/b_sync"
  op: "ControlTrigger"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPopV2"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPopV2"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Cast"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/sine_model/loss_fold/while/add_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/pow"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/pow"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/Enter"
  input: "sine_model/loss_fold/while/pow"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv_1"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/add_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/mul"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/truediv_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/truediv_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/sine_model/loss_fold/while/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/pow_grad/mul/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/mul/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/sub/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/sub"
  op: "Sub"
  input: "gradients/sine_model/loss_fold/while/pow_grad/mul/Const"
  input: "gradients/sine_model/loss_fold/while/pow_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow"
  op: "Pow"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/pow_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/Enter"
  input: "sine_model/loss_fold/while/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/pow_grad/mul"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/pow_grad/mul_1"
  input: "gradients/sine_model/loss_fold/while/pow_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Greater/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Greater"
  op: "Greater"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Log"
  op: "Log"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Pow/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Select"
  op: "Select"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Greater"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Log"
  input: "gradients/sine_model/loss_fold/while/pow_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/mul_2"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/mul_3"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/pow_grad/mul_2"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/pow_grad/mul_3"
  input: "gradients/sine_model/loss_fold/while/pow_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/pow_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/pow_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/pow_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/pow_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/sub_grad/Neg"
  op: "Neg"
  input: "gradients/sine_model/loss_fold/while/pow_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/pow_grad/tuple/control_dependency"
  input: "^gradients/sine_model/loss_fold/while/sub_grad/Neg"
}
node {
  name: "gradients/sine_model/loss_fold/while/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/pow_grad/tuple/control_dependency"
  input: "^gradients/sine_model/loss_fold/while/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/pow_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/sub_grad/Neg"
  input: "^gradients/sine_model/loss_fold/while/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape_2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Select"
  op: "Select"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/GreaterEqual"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/zeros"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Rsqrt_grad/RsqrtGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Select"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Select_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/sub_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/Real"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/Real"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/Enter"
  input: "sine_model/loss_fold/while/expectation/Real"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul_1/Const"
  input: "gradients/sine_model/loss_fold/while/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/expectation/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/expectation/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/add"
  op: "Add"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/add/Const"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/add"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/range"
  op: "Range"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/range/start"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Size"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/range"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/mod"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/DynamicStitch"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Maximum_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Real_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Real_grad/Complex"
  op: "Complex"
  input: "gradients/sine_model/loss_fold/while/expectation/mul_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/expectation/Real_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Const"
  op: "Const"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Tile"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Abs"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/normalize/Abs"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/normalize/Abs"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Sum_grad/Tile"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_4_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_4_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_4_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_4_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/Real_grad/Complex"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_4_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/Complex"
  op: "Complex"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Square_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/Sign"
  op: "Sign"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/Complex"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_4_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/normalize/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul"
  op: "BatchMatMul"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_2_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/Enter"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1"
  op: "BatchMatMul"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/Enter"
  input: "sine_model/loss_fold/while/expectation/einsum/Reshape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj/Const"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_1_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_2_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_3_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_3_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_3_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/Reshape_1_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum/transpose_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_2_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_4_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/Enter"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/expectation/einsum/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/expectation/einsum/transpose_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_2_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul_1"
  input: "^gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_1_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_1_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul"
  op: "BatchMatMul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1"
  op: "BatchMatMul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_1_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_1_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj/Const"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Conj_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_1_grad/transpose"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/Neg"
  op: "Neg"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/control_dependency_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/Neg"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/tuple/control_dependency_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/Neg"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_2_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Reshape_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj/Const"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: -0.0
        scomplex_val: -1.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/Cast_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/Cast_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Mul_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Shape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/MatMul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj_1/Const"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 2.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/RealDiv"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Neg"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/RealDiv_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Conj_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/mul"
  op: "Mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/sub_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/mul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Sum_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/Mul_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/add_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/expectation/einsum/transpose_3_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum/transpose_1_grad/transpose"
  input: "gradients/sine_model/loss_fold/while/expectation/Conj_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_3_grad/transpose"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/normalize/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1_grad/Cast"
  op: "Cast"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/mul_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/Cast_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/f_acc"
  op: "StackV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/loss_fold/while/update_ancilla/Cast_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPushV2"
  op: "StackPushV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/Enter"
  input: "sine_model/loss_fold/while/update_ancilla/Cast_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPopV2"
  op: "StackPopV2"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_COMPLEX64
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj_1"
  op: "Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/Conj"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul_1"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1_grad/InvertPermutation/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1_grad/InvertPermutation/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/ExpandDims_2_grad/Reshape"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/Switch:1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/control_dependency"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/einsum_1/transpose_1_grad/transpose"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_2_grad/Cast"
  op: "Cast"
  input: "gradients/AddN_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/symmetrize/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
}
node {
  name: "gradients/sine_model/symmetrize/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
  input: "^gradients/sine_model/symmetrize/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/symmetrize/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
  input: "^gradients/sine_model/symmetrize/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast_grad/Cast"
  input: "gradients/sine_model/loss_fold/while/update_ancilla/Cast_2_grad/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/expectation/Cast_grad/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/sine_model/loss_fold/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc_1"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/Add"
  op: "Add"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/Switch:1"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/symmetrize/matrix_transpose/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "sine_model/symmetrize/matrix_transpose/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/symmetrize/matrix_transpose/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/sine_model/symmetrize/add_grad/tuple/control_dependency_1"
  input: "gradients/sine_model/symmetrize/matrix_transpose/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/sine_model/symmetrize/add_grad/tuple/control_dependency"
  input: "gradients/sine_model/symmetrize/matrix_transpose/transpose_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sine_model/loss_fold/while/update_ancilla/Cast_1/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sine_model/symmetrize/MatrixBandPart_grad/MatrixBandPart"
  op: "MatrixBandPart"
  input: "gradients/AddN_4"
  input: "sine_model/symmetrize/MatrixBandPart/num_lower"
  input: "sine_model/symmetrize/MatrixBandPart/num_upper"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindex"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sine_model/H/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/H/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/H/Adam/Assign"
  op: "Assign"
  input: "sine_model/H/Adam"
  input: "sine_model/H/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/H/Adam/read"
  op: "Identity"
  input: "sine_model/H/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/H/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/H/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/H/Adam_1/Assign"
  op: "Assign"
  input: "sine_model/H/Adam_1"
  input: "sine_model/H/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/H/Adam_1/read"
  op: "Identity"
  input: "sine_model/H/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/R/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/R/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/R/Adam/Assign"
  op: "Assign"
  input: "sine_model/R/Adam"
  input: "sine_model/R/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/R/Adam/read"
  op: "Identity"
  input: "sine_model/R/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model/R/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sine_model/R/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sine_model/R/Adam_1/Assign"
  op: "Assign"
  input: "sine_model/R/Adam_1"
  input: "sine_model/R/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sine_model/R/Adam_1/read"
  op: "Identity"
  input: "sine_model/R/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_sine_model/H/ApplyAdam"
  op: "ApplyAdam"
  input: "sine_model/H"
  input: "sine_model/H/Adam"
  input: "sine_model/H/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/sine_model/symmetrize/MatrixBandPart_grad/MatrixBandPart"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_sine_model/R/ApplyAdam"
  op: "ApplyAdam"
  input: "sine_model/R"
  input: "sine_model/R/Adam"
  input: "sine_model/R/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/sine_model/loss_fold/while/expectation/Cast/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_sine_model/H/ApplyAdam"
  input: "^Adam/update_sine_model/R/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_sine_model/H/ApplyAdam"
  input: "^Adam/update_sine_model/R/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_sine_model/H/ApplyAdam"
  input: "^Adam/update_sine_model/R/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global_step/Assign"
  input: "^guitar_model/H/Assign"
  input: "^guitar_model/R/Assign"
  input: "^sine_model/H/Adam/Assign"
  input: "^sine_model/H/Adam_1/Assign"
  input: "^sine_model/H/Assign"
  input: "^sine_model/R/Adam/Assign"
  input: "^sine_model/R/Adam_1/Assign"
  input: "^sine_model/R/Assign"
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_2"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "guitar_model/H"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "guitar_model/R"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "sine_model/H"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "sine_model/R"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "sine_model/H/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "sine_model/H/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "sine_model/R/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "sine_model/R/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 11
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: "guitar_model/H"
        string_val: "guitar_model/R"
        string_val: "sine_model/H"
        string_val: "sine_model/R"
        string_val: "global_step"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "sine_model/H/Adam"
        string_val: "sine_model/H/Adam_1"
        string_val: "sine_model/R/Adam"
        string_val: "sine_model/R/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "guitar_model/H"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "guitar_model/R"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "sine_model/H"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "sine_model/R"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "sine_model/H/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "sine_model/H/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "sine_model/R/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "sine_model/R/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 11
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: "guitar_model/H"
        string_val: "guitar_model/R"
        string_val: "sine_model/H"
        string_val: "sine_model/R"
        string_val: "global_step"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "sine_model/H/Adam"
        string_val: "sine_model/H/Adam_1"
        string_val: "sine_model/R/Adam"
        string_val: "sine_model/R/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_4"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_3"
  input: "^init_4"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss_function"
  input: "sample_inputs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_4472375e75b04a4199ef29543bfc7ddf/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "guitar_model/H"
        string_val: "guitar_model/R"
        string_val: "sine_model/H"
        string_val: "sine_model/H/Adam"
        string_val: "sine_model/H/Adam_1"
        string_val: "sine_model/R"
        string_val: "sine_model/R/Adam"
        string_val: "sine_model/R/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "guitar_model/H"
  input: "guitar_model/R"
  input: "sine_model/H"
  input: "sine_model/H/Adam"
  input: "sine_model/H/Adam_1"
  input: "sine_model/R"
  input: "sine_model/R/Adam"
  input: "sine_model/R/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "guitar_model/H"
        string_val: "guitar_model/R"
        string_val: "sine_model/H"
        string_val: "sine_model/H/Adam"
        string_val: "sine_model/H/Adam_1"
        string_val: "sine_model/R"
        string_val: "sine_model/R/Adam"
        string_val: "sine_model/R/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "guitar_model/H"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "guitar_model/R"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "sine_model/H"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "sine_model/H/Adam"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "sine_model/H/Adam_1"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "sine_model/R"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "sine_model/R/Adam"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "sine_model/R/Adam_1"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "sine_model_1/symmetrize/MatrixBandPart/num_lower"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sine_model_1/symmetrize/MatrixBandPart/num_upper"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sine_model_1/symmetrize/MatrixBandPart"
  op: "MatrixBandPart"
  input: "sine_model/H/read"
  input: "sine_model_1/symmetrize/MatrixBandPart/num_lower"
  input: "sine_model_1/symmetrize/MatrixBandPart/num_upper"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindex"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_1/symmetrize/matrix_transpose/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sine_model_1/symmetrize/matrix_transpose/transpose"
  op: "Transpose"
  input: "sine_model_1/symmetrize/MatrixBandPart"
  input: "sine_model_1/symmetrize/matrix_transpose/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sine_model_1/symmetrize/add"
  op: "Add"
  input: "sine_model_1/symmetrize/MatrixBandPart"
  input: "sine_model_1/symmetrize/matrix_transpose/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "save_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "guitar_model/H"
        string_val: "guitar_model/R"
        string_val: "sine_model/H"
        string_val: "sine_model/H/Adam"
        string_val: "sine_model/H/Adam_1"
        string_val: "sine_model/R"
        string_val: "sine_model/R/Adam"
        string_val: "sine_model/R/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2"
  op: "SaveV2"
  input: "save_1/Const"
  input: "save_1/SaveV2/tensor_names"
  input: "save_1/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "guitar_model/H"
  input: "guitar_model/R"
  input: "sine_model/H"
  input: "sine_model/H/Adam"
  input: "sine_model/H/Adam_1"
  input: "sine_model/R"
  input: "sine_model/R/Adam"
  input: "sine_model/R/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/control_dependency"
  op: "Identity"
  input: "save_1/Const"
  input: "^save_1/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "guitar_model/H"
        string_val: "guitar_model/R"
        string_val: "sine_model/H"
        string_val: "sine_model/H/Adam"
        string_val: "sine_model/H/Adam_1"
        string_val: "sine_model/R"
        string_val: "sine_model/R/Adam"
        string_val: "sine_model/R/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 11
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2/tensor_names"
  input: "save_1/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save_1/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save_1/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save_1/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_3"
  op: "Assign"
  input: "guitar_model/H"
  input: "save_1/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_4"
  op: "Assign"
  input: "guitar_model/R"
  input: "save_1/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@guitar_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_5"
  op: "Assign"
  input: "sine_model/H"
  input: "save_1/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_6"
  op: "Assign"
  input: "sine_model/H/Adam"
  input: "save_1/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_7"
  op: "Assign"
  input: "sine_model/H/Adam_1"
  input: "save_1/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/H"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_8"
  op: "Assign"
  input: "sine_model/R"
  input: "save_1/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_9"
  op: "Assign"
  input: "sine_model/R/Adam"
  input: "save_1/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_10"
  op: "Assign"
  input: "sine_model/R/Adam_1"
  input: "save_1/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sine_model/R"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_all"
  op: "NoOp"
  input: "^save_1/Assign"
  input: "^save_1/Assign_1"
  input: "^save_1/Assign_10"
  input: "^save_1/Assign_2"
  input: "^save_1/Assign_3"
  input: "^save_1/Assign_4"
  input: "^save_1/Assign_5"
  input: "^save_1/Assign_6"
  input: "^save_1/Assign_7"
  input: "^save_1/Assign_8"
  input: "^save_1/Assign_9"
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "zeros"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 1.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "one_hot"
  op: "OneHot"
  input: "Cast"
  input: "one_hot/depth"
  input: "one_hot/on_value"
  input: "one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "random_normal/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "random_normal/mean"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal/stddev"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.003162277629598975
      }
    }
  }
}
node {
  name: "random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal/mul"
  op: "Mul"
  input: "random_normal/RandomStandardNormal"
  input: "random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "random_normal"
  op: "Add"
  input: "random_normal/mul"
  input: "random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan/TensorArray"
  op: "TensorArrayV3"
  input: "sample_scan/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "sample_scan/TensorArrayUnstack/Shape"
  input: "sample_scan/TensorArrayUnstack/strided_slice/stack"
  input: "sample_scan/TensorArrayUnstack/strided_slice/stack_1"
  input: "sample_scan/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/range"
  op: "Range"
  input: "sample_scan/TensorArrayUnstack/range/start"
  input: "sample_scan/TensorArrayUnstack/strided_slice"
  input: "sample_scan/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "sample_scan/TensorArray"
  input: "sample_scan/TensorArrayUnstack/range"
  input: "random_normal"
  input: "sample_scan/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@random_normal"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan/TensorArray_1"
  op: "TensorArrayV3"
  input: "sample_scan/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan/TensorArray_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan/TensorArray_2"
  op: "TensorArrayV3"
  input: "sample_scan/TensorArray_2/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/while/Enter"
  op: "Enter"
  input: "sample_scan/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Enter_1"
  op: "Enter"
  input: "sample_scan/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Enter_2"
  op: "Enter"
  input: "one_hot"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Enter_3"
  op: "Enter"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Enter_4"
  op: "Enter"
  input: "sample_scan/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Enter_5"
  op: "Enter"
  input: "sample_scan/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Merge"
  op: "Merge"
  input: "sample_scan/while/Enter"
  input: "sample_scan/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Merge_1"
  op: "Merge"
  input: "sample_scan/while/Enter_1"
  input: "sample_scan/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Merge_2"
  op: "Merge"
  input: "sample_scan/while/Enter_2"
  input: "sample_scan/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Merge_3"
  op: "Merge"
  input: "sample_scan/while/Enter_3"
  input: "sample_scan/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Merge_4"
  op: "Merge"
  input: "sample_scan/while/Enter_4"
  input: "sample_scan/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Merge_5"
  op: "Merge"
  input: "sample_scan/while/Enter_5"
  input: "sample_scan/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Less"
  op: "Less"
  input: "sample_scan/while/Merge"
  input: "sample_scan/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Less/Enter"
  op: "Enter"
  input: "sample_scan/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/Less_1/y"
  op: "Const"
  input: "^sample_scan/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan/while/Less_1"
  op: "Less"
  input: "sample_scan/while/Merge_1"
  input: "sample_scan/while/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/LogicalAnd"
  op: "LogicalAnd"
  input: "sample_scan/while/Less"
  input: "sample_scan/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/LoopCond"
  op: "LoopCond"
  input: "sample_scan/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Switch"
  op: "Switch"
  input: "sample_scan/while/Merge"
  input: "sample_scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Switch_1"
  op: "Switch"
  input: "sample_scan/while/Merge_1"
  input: "sample_scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Switch_2"
  op: "Switch"
  input: "sample_scan/while/Merge_2"
  input: "sample_scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Switch_3"
  op: "Switch"
  input: "sample_scan/while/Merge_3"
  input: "sample_scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Switch_4"
  op: "Switch"
  input: "sample_scan/while/Merge_4"
  input: "sample_scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Switch_5"
  op: "Switch"
  input: "sample_scan/while/Merge_5"
  input: "sample_scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Identity"
  op: "Identity"
  input: "sample_scan/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Identity_1"
  op: "Identity"
  input: "sample_scan/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Identity_2"
  op: "Identity"
  input: "sample_scan/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Identity_3"
  op: "Identity"
  input: "sample_scan/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Identity_4"
  op: "Identity"
  input: "sample_scan/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Identity_5"
  op: "Identity"
  input: "sample_scan/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/add/y"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/while/add"
  op: "Add"
  input: "sample_scan/while/Identity"
  input: "sample_scan/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "sample_scan/while/TensorArrayReadV3/Enter"
  input: "sample_scan/while/Identity_1"
  input: "sample_scan/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "sample_scan/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "sample_scan/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/add_1"
  op: "Add"
  input: "sample_scan/while/Identity_3"
  input: "sample_scan/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/Cast"
  op: "Cast"
  input: "sample_scan/while/expectation/Cast/Enter"
  input: "^sample_scan/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/Cast/Enter"
  op: "Enter"
  input: "sine_model/R/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/expectation/Conj"
  op: "Conj"
  input: "sample_scan/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose"
  op: "Transpose"
  input: "sample_scan/while/expectation/Conj"
  input: "sample_scan/while/expectation/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_1/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_1"
  op: "Transpose"
  input: "sample_scan/while/expectation/Cast"
  input: "sample_scan/while/expectation/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/MatMul"
  op: "MatMul"
  input: "sample_scan/while/expectation/einsum/transpose"
  input: "sample_scan/while/expectation/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_2/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_2"
  op: "Transpose"
  input: "sample_scan/while/expectation/einsum/MatMul"
  input: "sample_scan/while/expectation/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_3/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_3"
  op: "Transpose"
  input: "sample_scan/while/Identity_2"
  input: "sample_scan/while/expectation/einsum/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/Reshape/shape"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/Reshape"
  op: "Reshape"
  input: "sample_scan/while/expectation/einsum/transpose_2"
  input: "sample_scan/while/expectation/einsum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/Reshape_1/shape"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/Reshape_1"
  op: "Reshape"
  input: "sample_scan/while/expectation/einsum/transpose_3"
  input: "sample_scan/while/expectation/einsum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/MatMul_1"
  op: "BatchMatMul"
  input: "sample_scan/while/expectation/einsum/Reshape"
  input: "sample_scan/while/expectation/einsum/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/Reshape_2/shape"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/Reshape_2"
  op: "Reshape"
  input: "sample_scan/while/expectation/einsum/MatMul_1"
  input: "sample_scan/while/expectation/einsum/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_4/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/einsum/transpose_4"
  op: "Transpose"
  input: "sample_scan/while/expectation/einsum/Reshape_2"
  input: "sample_scan/while/expectation/einsum/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/Real"
  op: "Real"
  input: "sample_scan/while/expectation/einsum/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/mul/x"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "sample_scan/while/expectation/mul"
  op: "Mul"
  input: "sample_scan/while/expectation/mul/x"
  input: "sample_scan/while/expectation/Real"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/add_2"
  op: "Add"
  input: "sample_scan/while/add_1"
  input: "sample_scan/while/expectation/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/sub"
  op: "Sub"
  input: "sample_scan/while/add_2"
  input: "sample_scan/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/Cast"
  op: "Cast"
  input: "sample_scan/while/sub"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/Cast_1"
  op: "Cast"
  input: "sample_scan/while/update_ancilla/Cast_1/Enter"
  input: "^sample_scan/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/Cast_1/Enter"
  op: "Enter"
  input: "sine_model_1/symmetrize/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/Cast_2"
  op: "Cast"
  input: "sample_scan/while/expectation/Cast/Enter"
  input: "^sample_scan/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/mul/x"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: -0.0
        scomplex_val: -1.0
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/mul"
  op: "Mul"
  input: "sample_scan/while/update_ancilla/mul/x"
  input: "sample_scan/while/update_ancilla/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/MatMul"
  op: "MatMul"
  input: "sample_scan/while/update_ancilla/Cast_2"
  input: "sample_scan/while/update_ancilla/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/truediv/y"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 2.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/truediv"
  op: "RealDiv"
  input: "sample_scan/while/update_ancilla/MatMul"
  input: "sample_scan/while/update_ancilla/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/sub"
  op: "Sub"
  input: "sample_scan/while/update_ancilla/mul"
  input: "sample_scan/while/update_ancilla/truediv"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/mul_1/x"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/mul_1"
  op: "Mul"
  input: "sample_scan/while/update_ancilla/mul_1/x"
  input: "sample_scan/while/update_ancilla/sub"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/transpose/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/transpose"
  op: "Transpose"
  input: "sample_scan/while/update_ancilla/mul_1"
  input: "sample_scan/while/update_ancilla/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/transpose_1/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/transpose_1"
  op: "Transpose"
  input: "sample_scan/while/Identity_2"
  input: "sample_scan/while/update_ancilla/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/MatMul"
  op: "MatMul"
  input: "sample_scan/while/update_ancilla/einsum/transpose"
  input: "sample_scan/while/update_ancilla/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/transpose_2/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum/transpose_2"
  op: "Transpose"
  input: "sample_scan/while/update_ancilla/einsum/MatMul"
  input: "sample_scan/while/update_ancilla/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/add"
  op: "Add"
  input: "sample_scan/while/Identity_2"
  input: "sample_scan/while/update_ancilla/einsum/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose"
  op: "Transpose"
  input: "sample_scan/while/update_ancilla/Cast"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_1/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_1"
  op: "Transpose"
  input: "sample_scan/while/update_ancilla/Cast_2"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/ExpandDims/dim"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/ExpandDims"
  op: "ExpandDims"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose"
  input: "sample_scan/while/update_ancilla/einsum_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_1"
  op: "ExpandDims"
  input: "sample_scan/while/update_ancilla/einsum_1/ExpandDims"
  input: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_2"
  op: "ExpandDims"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_1"
  input: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/Mul"
  op: "Mul"
  input: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_1"
  input: "sample_scan/while/update_ancilla/einsum_1/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_2/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_2"
  op: "Transpose"
  input: "sample_scan/while/update_ancilla/einsum_1/Mul"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_3/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_3"
  op: "Transpose"
  input: "sample_scan/while/Identity_2"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/Reshape/shape"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/Reshape"
  op: "Reshape"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_3"
  input: "sample_scan/while/update_ancilla/einsum_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/MatMul"
  op: "BatchMatMul"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_2"
  input: "sample_scan/while/update_ancilla/einsum_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/Reshape_1/shape"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/Reshape_1"
  op: "Reshape"
  input: "sample_scan/while/update_ancilla/einsum_1/MatMul"
  input: "sample_scan/while/update_ancilla/einsum_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_4/perm"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/einsum_1/transpose_4"
  op: "Transpose"
  input: "sample_scan/while/update_ancilla/einsum_1/Reshape_1"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/mul_2/x"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/mul_2"
  op: "Mul"
  input: "sample_scan/while/update_ancilla/mul_2/x"
  input: "sample_scan/while/update_ancilla/einsum_1/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/add_1"
  op: "Add"
  input: "sample_scan/while/update_ancilla/add"
  input: "sample_scan/while/update_ancilla/mul_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Abs"
  op: "ComplexAbs"
  input: "sample_scan/while/update_ancilla/add_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Square"
  op: "Square"
  input: "sample_scan/while/update_ancilla/normalize/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Sum/reduction_indices"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Sum"
  op: "Sum"
  input: "sample_scan/while/update_ancilla/normalize/Square"
  input: "sample_scan/while/update_ancilla/normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Maximum/y"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Maximum"
  op: "Maximum"
  input: "sample_scan/while/update_ancilla/normalize/Sum"
  input: "sample_scan/while/update_ancilla/normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Rsqrt"
  op: "Rsqrt"
  input: "sample_scan/while/update_ancilla/normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Cast"
  op: "Cast"
  input: "sample_scan/while/update_ancilla/normalize/Rsqrt"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/update_ancilla/normalize/Mul"
  op: "Mul"
  input: "sample_scan/while/update_ancilla/add_1"
  input: "sample_scan/while/update_ancilla/normalize/Cast"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "sample_scan/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "sample_scan/while/Identity_1"
  input: "sample_scan/while/update_ancilla/normalize/Mul"
  input: "sample_scan/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/update_ancilla/normalize/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "sample_scan/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/update_ancilla/normalize/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "sample_scan/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "sample_scan/while/Identity_1"
  input: "sample_scan/while/add_2"
  input: "sample_scan/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "sample_scan/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan/while/add_3/y"
  op: "Const"
  input: "^sample_scan/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/while/add_3"
  op: "Add"
  input: "sample_scan/while/Identity_1"
  input: "sample_scan/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/NextIteration"
  op: "NextIteration"
  input: "sample_scan/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/NextIteration_1"
  op: "NextIteration"
  input: "sample_scan/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/NextIteration_2"
  op: "NextIteration"
  input: "sample_scan/while/update_ancilla/normalize/Mul"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/NextIteration_3"
  op: "NextIteration"
  input: "sample_scan/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/NextIteration_4"
  op: "NextIteration"
  input: "sample_scan/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/NextIteration_5"
  op: "NextIteration"
  input: "sample_scan/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Exit"
  op: "Exit"
  input: "sample_scan/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Exit_1"
  op: "Exit"
  input: "sample_scan/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Exit_2"
  op: "Exit"
  input: "sample_scan/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Exit_3"
  op: "Exit"
  input: "sample_scan/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Exit_4"
  op: "Exit"
  input: "sample_scan/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/while/Exit_5"
  op: "Exit"
  input: "sample_scan/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "sample_scan/TensorArray_1"
  input: "sample_scan/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack/range"
  op: "Range"
  input: "sample_scan/TensorArrayStack/range/start"
  input: "sample_scan/TensorArrayStack/TensorArraySizeV3"
  input: "sample_scan/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "sample_scan/TensorArray_1"
  input: "sample_scan/TensorArrayStack/range"
  input: "sample_scan/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "sample_scan/TensorArray_2"
  input: "sample_scan/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack_1/range"
  op: "Range"
  input: "sample_scan/TensorArrayStack_1/range/start"
  input: "sample_scan/TensorArrayStack_1/TensorArraySizeV3"
  input: "sample_scan/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "sample_scan/TensorArray_2"
  input: "sample_scan/TensorArrayStack_1/range"
  input: "sample_scan/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "sample_scan/TensorArrayStack_1/TensorArrayGatherV3"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1000
          }
        }
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "zeros_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "one_hot_1/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 1.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_1/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_1/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "one_hot_1"
  op: "OneHot"
  input: "Cast_1"
  input: "one_hot_1/depth"
  input: "one_hot_1/on_value"
  input: "one_hot_1/off_value"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "random_normal_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "random_normal_1/mean"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_1/stddev"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03162277489900589
      }
    }
  }
}
node {
  name: "random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_1/mul"
  op: "Mul"
  input: "random_normal_1/RandomStandardNormal"
  input: "random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "random_normal_1"
  op: "Add"
  input: "random_normal_1/mul"
  input: "random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArray"
  op: "TensorArrayV3"
  input: "sample_scan_1/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "sample_scan_1/TensorArrayUnstack/Shape"
  input: "sample_scan_1/TensorArrayUnstack/strided_slice/stack"
  input: "sample_scan_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "sample_scan_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/range"
  op: "Range"
  input: "sample_scan_1/TensorArrayUnstack/range/start"
  input: "sample_scan_1/TensorArrayUnstack/strided_slice"
  input: "sample_scan_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "sample_scan_1/TensorArray"
  input: "sample_scan_1/TensorArrayUnstack/range"
  input: "random_normal_1"
  input: "sample_scan_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@random_normal_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "sample_scan_1/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan_1/TensorArray_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "sample_scan_1/TensorArray_2/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Enter"
  op: "Enter"
  input: "sample_scan_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Enter_1"
  op: "Enter"
  input: "sample_scan_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Enter_2"
  op: "Enter"
  input: "one_hot_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Enter_3"
  op: "Enter"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Enter_4"
  op: "Enter"
  input: "sample_scan_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Enter_5"
  op: "Enter"
  input: "sample_scan_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Merge"
  op: "Merge"
  input: "sample_scan_1/while/Enter"
  input: "sample_scan_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Merge_1"
  op: "Merge"
  input: "sample_scan_1/while/Enter_1"
  input: "sample_scan_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Merge_2"
  op: "Merge"
  input: "sample_scan_1/while/Enter_2"
  input: "sample_scan_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Merge_3"
  op: "Merge"
  input: "sample_scan_1/while/Enter_3"
  input: "sample_scan_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Merge_4"
  op: "Merge"
  input: "sample_scan_1/while/Enter_4"
  input: "sample_scan_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Merge_5"
  op: "Merge"
  input: "sample_scan_1/while/Enter_5"
  input: "sample_scan_1/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Less"
  op: "Less"
  input: "sample_scan_1/while/Merge"
  input: "sample_scan_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Less/Enter"
  op: "Enter"
  input: "sample_scan_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/Less_1/y"
  op: "Const"
  input: "^sample_scan_1/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Less_1"
  op: "Less"
  input: "sample_scan_1/while/Merge_1"
  input: "sample_scan_1/while/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "sample_scan_1/while/Less"
  input: "sample_scan_1/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/LoopCond"
  op: "LoopCond"
  input: "sample_scan_1/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Switch"
  op: "Switch"
  input: "sample_scan_1/while/Merge"
  input: "sample_scan_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Switch_1"
  op: "Switch"
  input: "sample_scan_1/while/Merge_1"
  input: "sample_scan_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Switch_2"
  op: "Switch"
  input: "sample_scan_1/while/Merge_2"
  input: "sample_scan_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Switch_3"
  op: "Switch"
  input: "sample_scan_1/while/Merge_3"
  input: "sample_scan_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Switch_4"
  op: "Switch"
  input: "sample_scan_1/while/Merge_4"
  input: "sample_scan_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Switch_5"
  op: "Switch"
  input: "sample_scan_1/while/Merge_5"
  input: "sample_scan_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Identity"
  op: "Identity"
  input: "sample_scan_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Identity_1"
  op: "Identity"
  input: "sample_scan_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Identity_2"
  op: "Identity"
  input: "sample_scan_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Identity_3"
  op: "Identity"
  input: "sample_scan_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Identity_4"
  op: "Identity"
  input: "sample_scan_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Identity_5"
  op: "Identity"
  input: "sample_scan_1/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/add/y"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/while/add"
  op: "Add"
  input: "sample_scan_1/while/Identity"
  input: "sample_scan_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "sample_scan_1/while/TensorArrayReadV3/Enter"
  input: "sample_scan_1/while/Identity_1"
  input: "sample_scan_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "sample_scan_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "sample_scan_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/add_1"
  op: "Add"
  input: "sample_scan_1/while/Identity_3"
  input: "sample_scan_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/Cast"
  op: "Cast"
  input: "sample_scan_1/while/expectation/Cast/Enter"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/Cast/Enter"
  op: "Enter"
  input: "sine_model/R/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/Conj"
  op: "Conj"
  input: "sample_scan_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose"
  op: "Transpose"
  input: "sample_scan_1/while/expectation/Conj"
  input: "sample_scan_1/while/expectation/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_1/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_1"
  op: "Transpose"
  input: "sample_scan_1/while/expectation/Cast"
  input: "sample_scan_1/while/expectation/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/MatMul"
  op: "MatMul"
  input: "sample_scan_1/while/expectation/einsum/transpose"
  input: "sample_scan_1/while/expectation/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_2/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_2"
  op: "Transpose"
  input: "sample_scan_1/while/expectation/einsum/MatMul"
  input: "sample_scan_1/while/expectation/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_3/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_3"
  op: "Transpose"
  input: "sample_scan_1/while/Identity_2"
  input: "sample_scan_1/while/expectation/einsum/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/Reshape/shape"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/Reshape"
  op: "Reshape"
  input: "sample_scan_1/while/expectation/einsum/transpose_2"
  input: "sample_scan_1/while/expectation/einsum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/Reshape_1/shape"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/Reshape_1"
  op: "Reshape"
  input: "sample_scan_1/while/expectation/einsum/transpose_3"
  input: "sample_scan_1/while/expectation/einsum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/MatMul_1"
  op: "BatchMatMul"
  input: "sample_scan_1/while/expectation/einsum/Reshape"
  input: "sample_scan_1/while/expectation/einsum/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/Reshape_2/shape"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/Reshape_2"
  op: "Reshape"
  input: "sample_scan_1/while/expectation/einsum/MatMul_1"
  input: "sample_scan_1/while/expectation/einsum/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_4/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/einsum/transpose_4"
  op: "Transpose"
  input: "sample_scan_1/while/expectation/einsum/Reshape_2"
  input: "sample_scan_1/while/expectation/einsum/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/Real"
  op: "Real"
  input: "sample_scan_1/while/expectation/einsum/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/mul/x"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/expectation/mul"
  op: "Mul"
  input: "sample_scan_1/while/expectation/mul/x"
  input: "sample_scan_1/while/expectation/Real"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/add_2"
  op: "Add"
  input: "sample_scan_1/while/add_1"
  input: "sample_scan_1/while/expectation/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/sub"
  op: "Sub"
  input: "sample_scan_1/while/add_2"
  input: "sample_scan_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/Cast"
  op: "Cast"
  input: "sample_scan_1/while/sub"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/Cast_1"
  op: "Cast"
  input: "sample_scan_1/while/update_ancilla/Cast_1/Enter"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/Cast_1/Enter"
  op: "Enter"
  input: "sine_model_1/symmetrize/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/Cast_2"
  op: "Cast"
  input: "sample_scan_1/while/expectation/Cast/Enter"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/mul/x"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: -0.0
        scomplex_val: -1.0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/mul"
  op: "Mul"
  input: "sample_scan_1/while/update_ancilla/mul/x"
  input: "sample_scan_1/while/update_ancilla/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/MatMul"
  op: "MatMul"
  input: "sample_scan_1/while/update_ancilla/Cast_2"
  input: "sample_scan_1/while/update_ancilla/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/truediv/y"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 2.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/truediv"
  op: "RealDiv"
  input: "sample_scan_1/while/update_ancilla/MatMul"
  input: "sample_scan_1/while/update_ancilla/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/sub"
  op: "Sub"
  input: "sample_scan_1/while/update_ancilla/mul"
  input: "sample_scan_1/while/update_ancilla/truediv"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/mul_1/x"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/mul_1"
  op: "Mul"
  input: "sample_scan_1/while/update_ancilla/mul_1/x"
  input: "sample_scan_1/while/update_ancilla/sub"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/transpose/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/transpose"
  op: "Transpose"
  input: "sample_scan_1/while/update_ancilla/mul_1"
  input: "sample_scan_1/while/update_ancilla/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/transpose_1/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/transpose_1"
  op: "Transpose"
  input: "sample_scan_1/while/Identity_2"
  input: "sample_scan_1/while/update_ancilla/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/MatMul"
  op: "MatMul"
  input: "sample_scan_1/while/update_ancilla/einsum/transpose"
  input: "sample_scan_1/while/update_ancilla/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/transpose_2/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum/transpose_2"
  op: "Transpose"
  input: "sample_scan_1/while/update_ancilla/einsum/MatMul"
  input: "sample_scan_1/while/update_ancilla/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/add"
  op: "Add"
  input: "sample_scan_1/while/Identity_2"
  input: "sample_scan_1/while/update_ancilla/einsum/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose"
  op: "Transpose"
  input: "sample_scan_1/while/update_ancilla/Cast"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_1/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_1"
  op: "Transpose"
  input: "sample_scan_1/while/update_ancilla/Cast_2"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims/dim"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims"
  op: "ExpandDims"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose"
  input: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_1"
  op: "ExpandDims"
  input: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims"
  input: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_2"
  op: "ExpandDims"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_1"
  input: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/Mul"
  op: "Mul"
  input: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_1"
  input: "sample_scan_1/while/update_ancilla/einsum_1/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_2/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_2"
  op: "Transpose"
  input: "sample_scan_1/while/update_ancilla/einsum_1/Mul"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_3/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_3"
  op: "Transpose"
  input: "sample_scan_1/while/Identity_2"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/Reshape/shape"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/Reshape"
  op: "Reshape"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_3"
  input: "sample_scan_1/while/update_ancilla/einsum_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/MatMul"
  op: "BatchMatMul"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_2"
  input: "sample_scan_1/while/update_ancilla/einsum_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/Reshape_1/shape"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/Reshape_1"
  op: "Reshape"
  input: "sample_scan_1/while/update_ancilla/einsum_1/MatMul"
  input: "sample_scan_1/while/update_ancilla/einsum_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_4/perm"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/einsum_1/transpose_4"
  op: "Transpose"
  input: "sample_scan_1/while/update_ancilla/einsum_1/Reshape_1"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/mul_2/x"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/mul_2"
  op: "Mul"
  input: "sample_scan_1/while/update_ancilla/mul_2/x"
  input: "sample_scan_1/while/update_ancilla/einsum_1/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/add_1"
  op: "Add"
  input: "sample_scan_1/while/update_ancilla/add"
  input: "sample_scan_1/while/update_ancilla/mul_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Abs"
  op: "ComplexAbs"
  input: "sample_scan_1/while/update_ancilla/add_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Square"
  op: "Square"
  input: "sample_scan_1/while/update_ancilla/normalize/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Sum/reduction_indices"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Sum"
  op: "Sum"
  input: "sample_scan_1/while/update_ancilla/normalize/Square"
  input: "sample_scan_1/while/update_ancilla/normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Maximum/y"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Maximum"
  op: "Maximum"
  input: "sample_scan_1/while/update_ancilla/normalize/Sum"
  input: "sample_scan_1/while/update_ancilla/normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Rsqrt"
  op: "Rsqrt"
  input: "sample_scan_1/while/update_ancilla/normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Cast"
  op: "Cast"
  input: "sample_scan_1/while/update_ancilla/normalize/Rsqrt"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/update_ancilla/normalize/Mul"
  op: "Mul"
  input: "sample_scan_1/while/update_ancilla/add_1"
  input: "sample_scan_1/while/update_ancilla/normalize/Cast"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "sample_scan_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "sample_scan_1/while/Identity_1"
  input: "sample_scan_1/while/update_ancilla/normalize/Mul"
  input: "sample_scan_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/update_ancilla/normalize/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "sample_scan_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/update_ancilla/normalize/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "sample_scan_1/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "sample_scan_1/while/Identity_1"
  input: "sample_scan_1/while/add_2"
  input: "sample_scan_1/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "sample_scan_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_1/while/add_3/y"
  op: "Const"
  input: "^sample_scan_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/while/add_3"
  op: "Add"
  input: "sample_scan_1/while/Identity_1"
  input: "sample_scan_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/NextIteration"
  op: "NextIteration"
  input: "sample_scan_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/NextIteration_1"
  op: "NextIteration"
  input: "sample_scan_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/NextIteration_2"
  op: "NextIteration"
  input: "sample_scan_1/while/update_ancilla/normalize/Mul"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/NextIteration_3"
  op: "NextIteration"
  input: "sample_scan_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/NextIteration_4"
  op: "NextIteration"
  input: "sample_scan_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/NextIteration_5"
  op: "NextIteration"
  input: "sample_scan_1/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Exit"
  op: "Exit"
  input: "sample_scan_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Exit_1"
  op: "Exit"
  input: "sample_scan_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Exit_2"
  op: "Exit"
  input: "sample_scan_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Exit_3"
  op: "Exit"
  input: "sample_scan_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Exit_4"
  op: "Exit"
  input: "sample_scan_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/while/Exit_5"
  op: "Exit"
  input: "sample_scan_1/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "sample_scan_1/TensorArray_1"
  input: "sample_scan_1/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack/range"
  op: "Range"
  input: "sample_scan_1/TensorArrayStack/range/start"
  input: "sample_scan_1/TensorArrayStack/TensorArraySizeV3"
  input: "sample_scan_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "sample_scan_1/TensorArray_1"
  input: "sample_scan_1/TensorArrayStack/range"
  input: "sample_scan_1/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "sample_scan_1/TensorArray_2"
  input: "sample_scan_1/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack_1/range"
  op: "Range"
  input: "sample_scan_1/TensorArrayStack_1/range/start"
  input: "sample_scan_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "sample_scan_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "sample_scan_1/TensorArray_2"
  input: "sample_scan_1/TensorArrayStack_1/range"
  input: "sample_scan_1/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "sample_scan_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1000
          }
        }
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Cast_2"
  op: "Cast"
  input: "zeros_2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "one_hot_2/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 1.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_2/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_2/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "one_hot_2"
  op: "OneHot"
  input: "Cast_2"
  input: "one_hot_2/depth"
  input: "one_hot_2/on_value"
  input: "one_hot_2/off_value"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "random_normal_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "random_normal_2/mean"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_2/stddev"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "random_normal_2/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_2/mul"
  op: "Mul"
  input: "random_normal_2/RandomStandardNormal"
  input: "random_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "random_normal_2"
  op: "Add"
  input: "random_normal_2/mul"
  input: "random_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArray"
  op: "TensorArrayV3"
  input: "sample_scan_2/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "sample_scan_2/TensorArrayUnstack/Shape"
  input: "sample_scan_2/TensorArrayUnstack/strided_slice/stack"
  input: "sample_scan_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "sample_scan_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/range"
  op: "Range"
  input: "sample_scan_2/TensorArrayUnstack/range/start"
  input: "sample_scan_2/TensorArrayUnstack/strided_slice"
  input: "sample_scan_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "sample_scan_2/TensorArray"
  input: "sample_scan_2/TensorArrayUnstack/range"
  input: "random_normal_2"
  input: "sample_scan_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@random_normal_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "sample_scan_2/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan_2/TensorArray_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArray_2"
  op: "TensorArrayV3"
  input: "sample_scan_2/TensorArray_2/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sample_scan_2/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_2/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Enter"
  op: "Enter"
  input: "sample_scan_2/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Enter_1"
  op: "Enter"
  input: "sample_scan_2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Enter_2"
  op: "Enter"
  input: "one_hot_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Enter_3"
  op: "Enter"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Enter_4"
  op: "Enter"
  input: "sample_scan_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Enter_5"
  op: "Enter"
  input: "sample_scan_2/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Merge"
  op: "Merge"
  input: "sample_scan_2/while/Enter"
  input: "sample_scan_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Merge_1"
  op: "Merge"
  input: "sample_scan_2/while/Enter_1"
  input: "sample_scan_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Merge_2"
  op: "Merge"
  input: "sample_scan_2/while/Enter_2"
  input: "sample_scan_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Merge_3"
  op: "Merge"
  input: "sample_scan_2/while/Enter_3"
  input: "sample_scan_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Merge_4"
  op: "Merge"
  input: "sample_scan_2/while/Enter_4"
  input: "sample_scan_2/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Merge_5"
  op: "Merge"
  input: "sample_scan_2/while/Enter_5"
  input: "sample_scan_2/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Less"
  op: "Less"
  input: "sample_scan_2/while/Merge"
  input: "sample_scan_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Less/Enter"
  op: "Enter"
  input: "sample_scan_2/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/Less_1/y"
  op: "Const"
  input: "^sample_scan_2/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Less_1"
  op: "Less"
  input: "sample_scan_2/while/Merge_1"
  input: "sample_scan_2/while/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/LogicalAnd"
  op: "LogicalAnd"
  input: "sample_scan_2/while/Less"
  input: "sample_scan_2/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/LoopCond"
  op: "LoopCond"
  input: "sample_scan_2/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Switch"
  op: "Switch"
  input: "sample_scan_2/while/Merge"
  input: "sample_scan_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Switch_1"
  op: "Switch"
  input: "sample_scan_2/while/Merge_1"
  input: "sample_scan_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Switch_2"
  op: "Switch"
  input: "sample_scan_2/while/Merge_2"
  input: "sample_scan_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Switch_3"
  op: "Switch"
  input: "sample_scan_2/while/Merge_3"
  input: "sample_scan_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Switch_4"
  op: "Switch"
  input: "sample_scan_2/while/Merge_4"
  input: "sample_scan_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Switch_5"
  op: "Switch"
  input: "sample_scan_2/while/Merge_5"
  input: "sample_scan_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Identity"
  op: "Identity"
  input: "sample_scan_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Identity_1"
  op: "Identity"
  input: "sample_scan_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Identity_2"
  op: "Identity"
  input: "sample_scan_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Identity_3"
  op: "Identity"
  input: "sample_scan_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Identity_4"
  op: "Identity"
  input: "sample_scan_2/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Identity_5"
  op: "Identity"
  input: "sample_scan_2/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/add/y"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/while/add"
  op: "Add"
  input: "sample_scan_2/while/Identity"
  input: "sample_scan_2/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "sample_scan_2/while/TensorArrayReadV3/Enter"
  input: "sample_scan_2/while/Identity_1"
  input: "sample_scan_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "sample_scan_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "sample_scan_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/add_1"
  op: "Add"
  input: "sample_scan_2/while/Identity_3"
  input: "sample_scan_2/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/Cast"
  op: "Cast"
  input: "sample_scan_2/while/expectation/Cast/Enter"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/Cast/Enter"
  op: "Enter"
  input: "sine_model/R/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/Conj"
  op: "Conj"
  input: "sample_scan_2/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose"
  op: "Transpose"
  input: "sample_scan_2/while/expectation/Conj"
  input: "sample_scan_2/while/expectation/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_1/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_1"
  op: "Transpose"
  input: "sample_scan_2/while/expectation/Cast"
  input: "sample_scan_2/while/expectation/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/MatMul"
  op: "MatMul"
  input: "sample_scan_2/while/expectation/einsum/transpose"
  input: "sample_scan_2/while/expectation/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_2/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_2"
  op: "Transpose"
  input: "sample_scan_2/while/expectation/einsum/MatMul"
  input: "sample_scan_2/while/expectation/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_3/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_3"
  op: "Transpose"
  input: "sample_scan_2/while/Identity_2"
  input: "sample_scan_2/while/expectation/einsum/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/Reshape/shape"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/Reshape"
  op: "Reshape"
  input: "sample_scan_2/while/expectation/einsum/transpose_2"
  input: "sample_scan_2/while/expectation/einsum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/Reshape_1/shape"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/Reshape_1"
  op: "Reshape"
  input: "sample_scan_2/while/expectation/einsum/transpose_3"
  input: "sample_scan_2/while/expectation/einsum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/MatMul_1"
  op: "BatchMatMul"
  input: "sample_scan_2/while/expectation/einsum/Reshape"
  input: "sample_scan_2/while/expectation/einsum/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/Reshape_2/shape"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/Reshape_2"
  op: "Reshape"
  input: "sample_scan_2/while/expectation/einsum/MatMul_1"
  input: "sample_scan_2/while/expectation/einsum/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_4/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/einsum/transpose_4"
  op: "Transpose"
  input: "sample_scan_2/while/expectation/einsum/Reshape_2"
  input: "sample_scan_2/while/expectation/einsum/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/Real"
  op: "Real"
  input: "sample_scan_2/while/expectation/einsum/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/mul/x"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/expectation/mul"
  op: "Mul"
  input: "sample_scan_2/while/expectation/mul/x"
  input: "sample_scan_2/while/expectation/Real"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/add_2"
  op: "Add"
  input: "sample_scan_2/while/add_1"
  input: "sample_scan_2/while/expectation/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/sub"
  op: "Sub"
  input: "sample_scan_2/while/add_2"
  input: "sample_scan_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/Cast"
  op: "Cast"
  input: "sample_scan_2/while/sub"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/Cast_1"
  op: "Cast"
  input: "sample_scan_2/while/update_ancilla/Cast_1/Enter"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/Cast_1/Enter"
  op: "Enter"
  input: "sine_model_1/symmetrize/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/Cast_2"
  op: "Cast"
  input: "sample_scan_2/while/expectation/Cast/Enter"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/mul/x"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: -0.0
        scomplex_val: -1.0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/mul"
  op: "Mul"
  input: "sample_scan_2/while/update_ancilla/mul/x"
  input: "sample_scan_2/while/update_ancilla/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/MatMul"
  op: "MatMul"
  input: "sample_scan_2/while/update_ancilla/Cast_2"
  input: "sample_scan_2/while/update_ancilla/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/truediv/y"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 2.0
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/truediv"
  op: "RealDiv"
  input: "sample_scan_2/while/update_ancilla/MatMul"
  input: "sample_scan_2/while/update_ancilla/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/sub"
  op: "Sub"
  input: "sample_scan_2/while/update_ancilla/mul"
  input: "sample_scan_2/while/update_ancilla/truediv"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/mul_1/x"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/mul_1"
  op: "Mul"
  input: "sample_scan_2/while/update_ancilla/mul_1/x"
  input: "sample_scan_2/while/update_ancilla/sub"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/transpose/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/transpose"
  op: "Transpose"
  input: "sample_scan_2/while/update_ancilla/mul_1"
  input: "sample_scan_2/while/update_ancilla/einsum/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/transpose_1/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/transpose_1"
  op: "Transpose"
  input: "sample_scan_2/while/Identity_2"
  input: "sample_scan_2/while/update_ancilla/einsum/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/MatMul"
  op: "MatMul"
  input: "sample_scan_2/while/update_ancilla/einsum/transpose"
  input: "sample_scan_2/while/update_ancilla/einsum/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/transpose_2/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum/transpose_2"
  op: "Transpose"
  input: "sample_scan_2/while/update_ancilla/einsum/MatMul"
  input: "sample_scan_2/while/update_ancilla/einsum/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/add"
  op: "Add"
  input: "sample_scan_2/while/Identity_2"
  input: "sample_scan_2/while/update_ancilla/einsum/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose"
  op: "Transpose"
  input: "sample_scan_2/while/update_ancilla/Cast"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_1/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_1"
  op: "Transpose"
  input: "sample_scan_2/while/update_ancilla/Cast_2"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims/dim"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims"
  op: "ExpandDims"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose"
  input: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_1"
  op: "ExpandDims"
  input: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims"
  input: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_2"
  op: "ExpandDims"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_1"
  input: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/Mul"
  op: "Mul"
  input: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_1"
  input: "sample_scan_2/while/update_ancilla/einsum_1/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_2/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_2"
  op: "Transpose"
  input: "sample_scan_2/while/update_ancilla/einsum_1/Mul"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_3/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_3"
  op: "Transpose"
  input: "sample_scan_2/while/Identity_2"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/Reshape/shape"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/Reshape"
  op: "Reshape"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_3"
  input: "sample_scan_2/while/update_ancilla/einsum_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/MatMul"
  op: "BatchMatMul"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_2"
  input: "sample_scan_2/while/update_ancilla/einsum_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/Reshape_1/shape"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/Reshape_1"
  op: "Reshape"
  input: "sample_scan_2/while/update_ancilla/einsum_1/MatMul"
  input: "sample_scan_2/while/update_ancilla/einsum_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_4/perm"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/einsum_1/transpose_4"
  op: "Transpose"
  input: "sample_scan_2/while/update_ancilla/einsum_1/Reshape_1"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/mul_2/x"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_COMPLEX64
        tensor_shape {
        }
        scomplex_val: 0.009999999776482582
        scomplex_val: 0.0
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/mul_2"
  op: "Mul"
  input: "sample_scan_2/while/update_ancilla/mul_2/x"
  input: "sample_scan_2/while/update_ancilla/einsum_1/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/add_1"
  op: "Add"
  input: "sample_scan_2/while/update_ancilla/add"
  input: "sample_scan_2/while/update_ancilla/mul_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Abs"
  op: "ComplexAbs"
  input: "sample_scan_2/while/update_ancilla/add_1"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Square"
  op: "Square"
  input: "sample_scan_2/while/update_ancilla/normalize/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Sum/reduction_indices"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Sum"
  op: "Sum"
  input: "sample_scan_2/while/update_ancilla/normalize/Square"
  input: "sample_scan_2/while/update_ancilla/normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Maximum/y"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Maximum"
  op: "Maximum"
  input: "sample_scan_2/while/update_ancilla/normalize/Sum"
  input: "sample_scan_2/while/update_ancilla/normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Rsqrt"
  op: "Rsqrt"
  input: "sample_scan_2/while/update_ancilla/normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Cast"
  op: "Cast"
  input: "sample_scan_2/while/update_ancilla/normalize/Rsqrt"
  attr {
    key: "DstT"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/update_ancilla/normalize/Mul"
  op: "Mul"
  input: "sample_scan_2/while/update_ancilla/add_1"
  input: "sample_scan_2/while/update_ancilla/normalize/Cast"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "sample_scan_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "sample_scan_2/while/Identity_1"
  input: "sample_scan_2/while/update_ancilla/normalize/Mul"
  input: "sample_scan_2/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/update_ancilla/normalize/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "sample_scan_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/update_ancilla/normalize/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "sample_scan_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "sample_scan_2/while/Identity_1"
  input: "sample_scan_2/while/add_2"
  input: "sample_scan_2/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "sample_scan_2/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "sample_scan_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "sample_scan_2/while/add_3/y"
  op: "Const"
  input: "^sample_scan_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/while/add_3"
  op: "Add"
  input: "sample_scan_2/while/Identity_1"
  input: "sample_scan_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/NextIteration"
  op: "NextIteration"
  input: "sample_scan_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/NextIteration_1"
  op: "NextIteration"
  input: "sample_scan_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/NextIteration_2"
  op: "NextIteration"
  input: "sample_scan_2/while/update_ancilla/normalize/Mul"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/NextIteration_3"
  op: "NextIteration"
  input: "sample_scan_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/NextIteration_4"
  op: "NextIteration"
  input: "sample_scan_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/NextIteration_5"
  op: "NextIteration"
  input: "sample_scan_2/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Exit"
  op: "Exit"
  input: "sample_scan_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Exit_1"
  op: "Exit"
  input: "sample_scan_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Exit_2"
  op: "Exit"
  input: "sample_scan_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Exit_3"
  op: "Exit"
  input: "sample_scan_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Exit_4"
  op: "Exit"
  input: "sample_scan_2/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/while/Exit_5"
  op: "Exit"
  input: "sample_scan_2/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "sample_scan_2/TensorArray_1"
  input: "sample_scan_2/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack/range"
  op: "Range"
  input: "sample_scan_2/TensorArrayStack/range/start"
  input: "sample_scan_2/TensorArrayStack/TensorArraySizeV3"
  input: "sample_scan_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "sample_scan_2/TensorArray_1"
  input: "sample_scan_2/TensorArrayStack/range"
  input: "sample_scan_2/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_COMPLEX64
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "sample_scan_2/TensorArray_2"
  input: "sample_scan_2/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack_1/range"
  op: "Range"
  input: "sample_scan_2/TensorArrayStack_1/range/start"
  input: "sample_scan_2/TensorArrayStack_1/TensorArraySizeV3"
  input: "sample_scan_2/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sample_scan_2/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "sample_scan_2/TensorArray_2"
  input: "sample_scan_2/TensorArrayStack_1/range"
  input: "sample_scan_2/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sample_scan_2/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1000
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "transpose_2/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_2"
  op: "Transpose"
  input: "sample_scan_2/TensorArrayStack_1/TensorArrayGatherV3"
  input: "transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1000
          }
        }
      }
    }
  }
}
library {
  function {
    signature {
      name: "tf_data_structured_function_wrapper_Qky8TA5ITQU"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "tfrecorddataset"
        type: DT_VARIANT
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "arg0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
    }
    ret {
      key: "tfrecorddataset"
      value: "TFRecordDataset:handle:0"
    }
  }
  function {
    signature {
      name: "tf_data_structured_function_wrapper_AuqsHeAbLzU"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "parsesingleexample_parsesingleexample"
        type: DT_FLOAT
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
    }
    node_def {
      name: "ParseSingleExample/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleExample/ParseSingleExample"
      op: "ParseSingleExample"
      input: "arg0"
      input: "ParseSingleExample/Const:output:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "dense_keys"
        value {
          list {
            s: "audio"
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
              dim {
                size: 65536
              }
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 0
        }
      }
      attr {
        key: "sparse_keys"
        value {
          list {
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
    }
    ret {
      key: "parsesingleexample_parsesingleexample"
      value: "ParseSingleExample/ParseSingleExample:dense_values:0"
    }
  }
  function {
    signature {
      name: "_make_dataset_SmWORJYaibI"
      output_arg {
        name: "repeatdataset"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorSliceDataset/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "../data/guitar.tfrecords"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/flat_filenames/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/flat_filenames"
      op: "Reshape"
      input: "TensorSliceDataset/Const:output:0"
      input: "TensorSliceDataset/flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_data_structured_function_wrapper_Qky8TA5ITQU"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "FlatMapDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_data_structured_function_wrapper_AuqsHeAbLzU"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 65536
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 32
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "MapDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 65536
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10000
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "BatchDatasetV2:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 65536
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "ShuffleDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 65536
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "repeatdataset"
      value: "RepeatDataset:handle:0"
    }
  }
}
versions {
  producer: 26
  min_consumer: 12
}
